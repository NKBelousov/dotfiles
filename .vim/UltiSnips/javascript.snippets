snippet class "class Foo" i
class ${1:name} extends ${2:Prototype} {
  ${3:declaration}
}

export default ${4:$1};
endsnippet

snippet singleton "Singleton" i
class ${1:name} extends ${2:Object} {
  constructor(){
    if ($1.instance === void 0){
      $1.instance = this;
    }
    return $1.instance;
  }
}

const instance = new $1();
export default instance;
endsnippet

snippet component "class Foo extends Component" i
import PropTypes from 'prop-types';
import React, {Component} from 'react';

class ${1:name} extends Component {
  render(){
    return ${2:node};
  }
}

export default ${3:$1};
endsnippet

snippet purecomponent "class Foo extends PureComponent" i
import PropTypes from "prop-types";
import React, { PureComponent } from "react";

class ${1:name} extends PureComponent {
  render(){
    return ${2:node};
  }
}

export default ${3:$1};
endsnippet

snippet propTypes "React::propTypes" i
static get propTypes(){
  return {
    ${1:object}
  };
}
endsnippet

snippet defaultProps "React::defaultProps" i
static get defaultProps(){
  return {
    ${1:object}
  };
}
endsnippet

snippet con "React::constructor(props)" i
constructor(props){
  super(props);

  this.state = {
    ${1:object}
  };
}
endsnippet


snippet cwm "React::componentWillMount()" i
componentWillMount(){
  ${1:expressions}
}
endsnippet

snippet cdm "React::componentDidMount()" i
componentDidMount(){
  ${1:expressions}
}
endsnippet

snippet cwrp "React::componentWillReceiveProps(object nextProps)" i
componentWillReceiveProps(nextProps){
  ${1:expressions}
}
endsnippet

snippet scu "React::shouldComponentUpdate(object nextProps, object nextState)" i
shouldComponentUpdate(nextProps, nextState){
  return ${1:expression}
}
endsnippet

snippet cwu "React::componentWillUpdate(object nextProps, object nextState)" i
componentWillUpdate(nextProps, nextState){
  ${1:expressions}
}
endsnippet

snippet cdu "React::componentDidUpdate(object prevProps, object prevState)" i
componentDidUpdate(prevProps, prevState){
  ${1:expressions}
}
endsnippet

snippet cwun "React::componentWillUnmount()" i
componentWillUnmount(){
  ${1:expressions}
}
endsnippet

snippet cdc "React::componentDidCatch(error, info)" i
componentDidCatch(error, info){
  ${1:expressions}
}
endsnippet

snippet gds "React::getDerivedStateFromProps(nextProps, prevState)" i
static getDerivedStateFromProps(nextProps, prevState){
  return {
    ${1:nextState}
  };
}
endsnippet

snippet bm "React::Bind method to this" i
this.$1 = this.$1.bind(this);
endsnippet

snippet gp "React::Get property by name" i
this.props.${1:key}
endsnippet

snippet gs "React::Get state property by name" i
this.state.${1:key}
endsnippet

snippet ref "React::Ref" i
ref={${1:name} => { this.$1 = $1; }}
endsnippet

snippet pta "PropTypes.array" i
PropTypes.array,
endsnippet

snippet ptar "PropTypes.array.isRequired" i
PropTypes.array.isRequired,
endsnippet

snippet ptao "PropTypes.arrayOf()" i
PropTypes.arrayOf(${1:propType}),
endsnippet

snippet ptaor "PropTypes.arrayOf().isRequired" i
PropTypes.arrayOf(${1:propType}).isRequired,
endsnippet

snippet ptb "PropTypes.bool" i
PropTypes.bool,
endsnippet

snippet ptbr "PropTypes.bool.isRequired" i
PropTypes.bool.isRequired,
endsnippet

snippet ptf "PropTypes.func" i
PropTypes.func,
endsnippet

snippet ptfr "PropTypes.func.isRequired" i
PropTypes.func.isRequired,
endsnippet

snippet ptn "PropTypes.number" i
PropTypes.number,
endsnippet

snippet ptnr "PropTypes.number.isRequired" i
PropTypes.number.isRequired,
endsnippet

snippet pto "PropTypes.object" i
PropTypes.object,
endsnippet

snippet ptor "PropTypes.object.isRequired" i
PropTypes.object.isRequired,
endsnippet

snippet ptoo "PropTypes.objectOf()" i
PropTypes.objectOf(${1:propType}),
endsnippet

snippet ptoor "PropTypes.objectOf().isRequired" i
PropTypes.objectOf(${1:propType}).isRequired,
endsnippet

snippet ptsh "PropTypes.shape({})" i
PropTypes.shape({
  ${1:object}
}),
endsnippet

snippet ptshr "PropTypes.shape({}).isRequired" i
PropTypes.shape({
  ${1:object}
}).isRequired,
endsnippet

snippet pts "PropTypes.string" i
PropTypes.string,
endsnippet

snippet ptsr "PropTypes.string.isRequired" i
PropTypes.string.isRequired,
endsnippet

snippet ptnd "PropTypes.node" i
PropTypes.node,
endsnippet

snippet ptndr "PropTypes.node.isRequired" i
PropTypes.node.isRequired,
endsnippet

snippet ptel "PropTypes.element" i
PropTypes.element,
endsnippet

snippet ptelr "PropTypes.element.isRequired" i
PropTypes.element.isRequired,
endsnippet

snippet pti "PropTypes.instanceOf" i
PropTypes.instanceOf(${1:class}),
endsnippet

snippet ptir "PropTypes.instanceOf.isRequired" i
PropTypes.instanceOf(${1:class}).isRequired,
endsnippet

snippet ptof "PropTypes.oneOf([])" i
PropTypes.oneOf([${1:array}]),
endsnippet

snippet ptofr "PropTypes.oneOf([]).isRequired" i
PropTypes.oneOf([${1:array}]).isRequired,
endsnippet

snippet ptoft "PropTypes.oneOfType([])" i
PropTypes.oneOfType([${1:array}]),
endsnippet

snippet ptoftr "PropTypes.oneOfType([]).isRequired" i
PropTypes.oneOfType([${1:array}]).isRequired,
endsnippet

snippet Prom "ES6::Promise" i
new Promise((resolve, reject) => {
  ${1:expressions}
});
endsnippet

snippet me "module.exports = " i
module.exports = ${1:expression};
endsnippet

snippet webpack "Webpack: Config template" i
module.exports = {
  entry: "${1:input}",
  output: {
    path: __dirname + "/dist",
    filename: "${2:output}",
  },
};
endsnippet

snippet imp "import ES6 module" i
import ${1:name} from "${2:from}";
endsnippet

snippet ex "export" i
export ${1:expression};
endsnippet

snippet exd "export default" i
export default ${1:expression};
endsnippet

snippet l "let foo = bar;"
let ${1:name} = ${2:value};
endsnippet

snippet c "const foo = bar;"
const ${1:name} = ${2:value};
endsnippet

snippet => "Arrow function" i
${1:params} => {
  ${2:expressions}
}
endsnippet

snippet tc "try/catch" i
try {
  ${1:try}
} catch(e){
  ${2:catch}
}
endsnippet

snippet sw "switch" i
switch(${1:expression}){
  ${2:handlers}
}
endsnippet

snippet swc "switch::case" i
case ${1:n}:
  ${2:handler};
  break;
endsnippet

snippet swd "switch::default" i
default:
  ${1:handler}
  break;
endsnippet

snippet js "JSON.stringify" i
JSON.stringify(${1:value})
endsnippet

snippet jp "JSON.parse"
JSON.parse(${1:string})
endsnippet

snippet iife "Immediately-invoked function expression" i
void function ${1:name}(${2:signature}){
  ${3:expressions}
}(${4:params})
endsnippet

snippet action "Redux: Action template" i
const ${1:name} = "$1";
const $1 = "$1_FAILURE";
const $1 = "$1_SUCCESS";
endsnippet

snippet cl "console.log(foo)"
console.log(${1:foo});
endsnippet

snippet cw "console.warn(foo)"
console.warn(${1:foo});
endsnippet

snippet ce "console.error(foo)"
console.error(${1:foo});
endsnippet
