snippet class "class Foo extends React.Component"
import React, {Component} from 'react';
import PropTypes from 'prop-types';

class $1 extends Component {
  static get propTypes(){
	return {};
  }
  static get defaultProps(){
    return {};
  }
  render(){
    return $2;
  }
}

export default $1;
endsnippet

snippet con "constructor(props)"
constructor(props){
  super(props);

  this.state = {
    $1
  };
}
endsnippet


snippet cwm "componentWillMount()"
componentWillMount(){
  $1
}
endsnippet

snippet cdm "componentDidMount()"
componentDidMount(){
  $1
}
endsnippet

snippet cwrp "componentWillReceiveProps(object nextProps)"
componentWillReceiveProps(nextProps){
  $1
}
endsnippet

snippet scu "shouldComponentUpdate(object nextProps, object nextState)"
shouldComponentUpdate(nextProps, nextState){
  return $1
}
endsnippet

snippet cwu "componentWillUpdate(object nextProps, object nextState)"
componentWillUpdate(nextProps, nextState){
  $1
}
endsnippet

snippet cdu "componentDidUpdate(object prevProps, object prevState)"
componentDidUpdate(prevProps, prevState){
  $1
}
endsnippet

snippet cwun "componentWillUnmount()"
componentWillUnmount(){
  $1
}
endsnippet

snippet bm "React: Bind method to this"
this.$1 = this.$1.bind(this);
endsnippet

snippet gp "React: Get property by name"
this.props.$1
endsnippet

snippet gs "React: Get state property by name"
this.state.$1
endsnippet

snippet Prom "ES6::Promise"
new Promise((resolve, reject) => {
  $1
});
endsnippet

snippet me "module.exports = "
module.exports = $1;
endsnippet

snippet webpack "Webpack: Config template"
module.exports = {
  entry: "$1",
  output: {
	path: __dirname + "/dist",
	filename: "$2",
  },
};
endsnippet

snippet imp "import ES6 module"
import $1 from "$2";
endsnippet

snippet l "let foo = bar;"
let $1 = $2;
endsnippet

snippet c "const foo = bar;"
const $1 = $2;
endsnippet

snippet => "Arrow function"
$1 => {
	$2
}
endsnippet

snippet iife "Immediately-invoked function expression"
void $1($2){
	$3
}
endsnippet
